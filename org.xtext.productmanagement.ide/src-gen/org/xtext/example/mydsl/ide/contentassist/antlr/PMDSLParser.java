/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalPMDSLParser;
import org.xtext.example.mydsl.services.PMDSLGrammarAccess;

public class PMDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PMDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PMDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
			builder.put(grammarAccess.getCardinalityAccess().getAlternatives(), "rule__Cardinality__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getRelationAccess().getGroup(), "rule__Relation__Group__0");
			builder.put(grammarAccess.getRelationElementAccess().getGroup(), "rule__RelationElement__Group__0");
			builder.put(grammarAccess.getVariantAccess().getGroup(), "rule__Variant__Group__0");
			builder.put(grammarAccess.getModelAccess().getEntitiesAssignment_0(), "rule__Model__EntitiesAssignment_0");
			builder.put(grammarAccess.getModelAccess().getRelationsAssignment_1(), "rule__Model__RelationsAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getAttributesAssignment_3(), "rule__Entity__AttributesAssignment_3");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_1(), "rule__Attribute__NameAssignment_1");
			builder.put(grammarAccess.getAttributeAccess().getTypeAssignment_3(), "rule__Attribute__TypeAssignment_3");
			builder.put(grammarAccess.getTypeAccess().getEntityAssignment_0(), "rule__Type__EntityAssignment_0");
			builder.put(grammarAccess.getTypeAccess().getPrimitiveAssignment_1(), "rule__Type__PrimitiveAssignment_1");
			builder.put(grammarAccess.getRelationAccess().getRelationsListAssignment_2(), "rule__Relation__RelationsListAssignment_2");
			builder.put(grammarAccess.getRelationElementAccess().getEntity1Assignment_0(), "rule__RelationElement__Entity1Assignment_0");
			builder.put(grammarAccess.getRelationElementAccess().getCardinality1Assignment_1(), "rule__RelationElement__Cardinality1Assignment_1");
			builder.put(grammarAccess.getRelationElementAccess().getCardinality2Assignment_3(), "rule__RelationElement__Cardinality2Assignment_3");
			builder.put(grammarAccess.getRelationElementAccess().getEntity2Assignment_4(), "rule__RelationElement__Entity2Assignment_4");
			builder.put(grammarAccess.getVariantAccess().getReferenceAssignment_3(), "rule__Variant__ReferenceAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PMDSLGrammarAccess grammarAccess;

	@Override
	protected InternalPMDSLParser createParser() {
		InternalPMDSLParser result = new InternalPMDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PMDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PMDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
