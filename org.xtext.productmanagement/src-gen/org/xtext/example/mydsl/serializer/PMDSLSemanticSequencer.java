/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.pMDSL.Attribute;
import org.xtext.example.mydsl.pMDSL.Entity;
import org.xtext.example.mydsl.pMDSL.Model;
import org.xtext.example.mydsl.pMDSL.PMDSLPackage;
import org.xtext.example.mydsl.pMDSL.Relation;
import org.xtext.example.mydsl.pMDSL.RelationElement;
import org.xtext.example.mydsl.pMDSL.Type;
import org.xtext.example.mydsl.pMDSL.Variant;
import org.xtext.example.mydsl.services.PMDSLGrammarAccess;

@SuppressWarnings("all")
public class PMDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PMDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PMDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PMDSLPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case PMDSLPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case PMDSLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case PMDSLPackage.RELATION:
				sequence_Relation(context, (Relation) semanticObject); 
				return; 
			case PMDSLPackage.RELATION_ELEMENT:
				sequence_RelationElement(context, (RelationElement) semanticObject); 
				return; 
			case PMDSLPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			case PMDSLPackage.VARIANT:
				sequence_Variant(context, (Variant) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ID type=Type)
	 * </pre>
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PMDSLPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PMDSLPackage.Literals.ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, PMDSLPackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PMDSLPackage.Literals.ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttributeAccess().getTypeTypeParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID attributes+=Attribute*)
	 * </pre>
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     ((entities+=Entity+ relations+=Relation+) | relations+=Relation+)?
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RelationElement returns RelationElement
	 *
	 * Constraint:
	 *     (entity1=ID cardinality1=Cardinality cardinality2=Cardinality entity2=ID)
	 * </pre>
	 */
	protected void sequence_RelationElement(ISerializationContext context, RelationElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PMDSLPackage.Literals.RELATION_ELEMENT__ENTITY1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PMDSLPackage.Literals.RELATION_ELEMENT__ENTITY1));
			if (transientValues.isValueTransient(semanticObject, PMDSLPackage.Literals.RELATION_ELEMENT__CARDINALITY1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PMDSLPackage.Literals.RELATION_ELEMENT__CARDINALITY1));
			if (transientValues.isValueTransient(semanticObject, PMDSLPackage.Literals.RELATION_ELEMENT__CARDINALITY2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PMDSLPackage.Literals.RELATION_ELEMENT__CARDINALITY2));
			if (transientValues.isValueTransient(semanticObject, PMDSLPackage.Literals.RELATION_ELEMENT__ENTITY2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PMDSLPackage.Literals.RELATION_ELEMENT__ENTITY2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationElementAccess().getEntity1IDTerminalRuleCall_0_0(), semanticObject.getEntity1());
		feeder.accept(grammarAccess.getRelationElementAccess().getCardinality1CardinalityParserRuleCall_1_0(), semanticObject.getCardinality1());
		feeder.accept(grammarAccess.getRelationElementAccess().getCardinality2CardinalityParserRuleCall_3_0(), semanticObject.getCardinality2());
		feeder.accept(grammarAccess.getRelationElementAccess().getEntity2IDTerminalRuleCall_4_0(), semanticObject.getEntity2());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Relation returns Relation
	 *
	 * Constraint:
	 *     relationsList+=RelationElement+
	 * </pre>
	 */
	protected void sequence_Relation(ISerializationContext context, Relation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     (entity=[Entity|ID] | primitive=PrimitiveType)
	 * </pre>
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Variant returns Variant
	 *
	 * Constraint:
	 *     reference=ID
	 * </pre>
	 */
	protected void sequence_Variant(ISerializationContext context, Variant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PMDSLPackage.Literals.VARIANT__REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PMDSLPackage.Literals.VARIANT__REFERENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariantAccess().getReferenceIDTerminalRuleCall_3_0(), semanticObject.getReference());
		feeder.finish();
	}
	
	
}
