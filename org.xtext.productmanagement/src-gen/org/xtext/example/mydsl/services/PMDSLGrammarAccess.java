/*
 * generated by Xtext 2.38.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PMDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PMDSL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntitiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_0_0 = (RuleCall)cEntitiesAssignment_0.eContents().get(0);
		private final Assignment cRelationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRelationsRelationParserRuleCall_1_0 = (RuleCall)cRelationsAssignment_1.eContents().get(0);
		
		//Model:
		//    entities+=Entity*
		//    relations+=Relation*;
		@Override public ParserRule getRule() { return rule; }
		
		//entities+=Entity*
		//relations+=Relation*
		public Group getGroup() { return cGroup; }
		
		//entities+=Entity*
		public Assignment getEntitiesAssignment_0() { return cEntitiesAssignment_0; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_0_0() { return cEntitiesEntityParserRuleCall_0_0; }
		
		//relations+=Relation*
		public Assignment getRelationsAssignment_1() { return cRelationsAssignment_1; }
		
		//Relation
		public RuleCall getRelationsRelationParserRuleCall_1_0() { return cRelationsRelationParserRuleCall_1_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PMDSL.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Entity:
		//    'entity' name=ID '{'
		//        attributes+=Attribute*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name=ID '{'
		//    attributes+=Attribute*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//attributes+=Attribute*
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_3_0() { return cAttributesAttributeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PMDSL.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Attribute:
		//    'attribute' name=ID 'as' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' name=ID 'as' type=Type
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PMDSL.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEntityAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cEntityEntityCrossReference_0_0 = (CrossReference)cEntityAssignment_0.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_0_0_1 = (RuleCall)cEntityEntityCrossReference_0_0.eContents().get(1);
		private final Assignment cPrimitiveAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPrimitivePrimitiveTypeParserRuleCall_1_0 = (RuleCall)cPrimitiveAssignment_1.eContents().get(0);
		
		//Type:
		//    entity=[Entity] | primitive=PrimitiveType;
		@Override public ParserRule getRule() { return rule; }
		
		//entity=[Entity] | primitive=PrimitiveType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//entity=[Entity]
		public Assignment getEntityAssignment_0() { return cEntityAssignment_0; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_0_0() { return cEntityEntityCrossReference_0_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_0_0_1() { return cEntityEntityIDTerminalRuleCall_0_0_1; }
		
		//primitive=PrimitiveType
		public Assignment getPrimitiveAssignment_1() { return cPrimitiveAssignment_1; }
		
		//PrimitiveType
		public RuleCall getPrimitivePrimitiveTypeParserRuleCall_1_0() { return cPrimitivePrimitiveTypeParserRuleCall_1_0; }
	}
	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PMDSL.PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNumberKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBooleanKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDateKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cNumberKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cStringKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cBooleanKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDateKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//PrimitiveType:
		//    'number' | 'string' | 'boolean' | 'date' | 'number[]' | 'string[]' | 'boolean[]' | 'date[]';
		@Override public ParserRule getRule() { return rule; }
		
		//'number' | 'string' | 'boolean' | 'date' | 'number[]' | 'string[]' | 'boolean[]' | 'date[]'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'number'
		public Keyword getNumberKeyword_0() { return cNumberKeyword_0; }
		
		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//'boolean'
		public Keyword getBooleanKeyword_2() { return cBooleanKeyword_2; }
		
		//'date'
		public Keyword getDateKeyword_3() { return cDateKeyword_3; }
		
		//'number[]'
		public Keyword getNumberKeyword_4() { return cNumberKeyword_4; }
		
		//'string[]'
		public Keyword getStringKeyword_5() { return cStringKeyword_5; }
		
		//'boolean[]'
		public Keyword getBooleanKeyword_6() { return cBooleanKeyword_6; }
		
		//'date[]'
		public Keyword getDateKeyword_7() { return cDateKeyword_7; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PMDSL.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRelationsListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRelationsListRelationElementParserRuleCall_2_0 = (RuleCall)cRelationsListAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Relation:
		//    'relations' '{'
		//        relationsList+=RelationElement*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'relations' '{'
		//    relationsList+=RelationElement*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'relations'
		public Keyword getRelationsKeyword_0() { return cRelationsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//relationsList+=RelationElement*
		public Assignment getRelationsListAssignment_2() { return cRelationsListAssignment_2; }
		
		//RelationElement
		public RuleCall getRelationsListRelationElementParserRuleCall_2_0() { return cRelationsListRelationElementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class RelationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PMDSL.RelationElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntity1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntity1IDTerminalRuleCall_0_0 = (RuleCall)cEntity1Assignment_0.eContents().get(0);
		private final Assignment cCardinality1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCardinality1CardinalityParserRuleCall_1_0 = (RuleCall)cCardinality1Assignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCardinality2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCardinality2CardinalityParserRuleCall_3_0 = (RuleCall)cCardinality2Assignment_3.eContents().get(0);
		private final Assignment cEntity2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntity2IDTerminalRuleCall_4_0 = (RuleCall)cEntity2Assignment_4.eContents().get(0);
		
		//RelationElement:
		//    entity1=ID cardinality1=Cardinality '-' cardinality2=Cardinality entity2=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//entity1=ID cardinality1=Cardinality '-' cardinality2=Cardinality entity2=ID
		public Group getGroup() { return cGroup; }
		
		//entity1=ID
		public Assignment getEntity1Assignment_0() { return cEntity1Assignment_0; }
		
		//ID
		public RuleCall getEntity1IDTerminalRuleCall_0_0() { return cEntity1IDTerminalRuleCall_0_0; }
		
		//cardinality1=Cardinality
		public Assignment getCardinality1Assignment_1() { return cCardinality1Assignment_1; }
		
		//Cardinality
		public RuleCall getCardinality1CardinalityParserRuleCall_1_0() { return cCardinality1CardinalityParserRuleCall_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//cardinality2=Cardinality
		public Assignment getCardinality2Assignment_3() { return cCardinality2Assignment_3; }
		
		//Cardinality
		public RuleCall getCardinality2CardinalityParserRuleCall_3_0() { return cCardinality2CardinalityParserRuleCall_3_0; }
		
		//entity2=ID
		public Assignment getEntity2Assignment_4() { return cEntity2Assignment_4; }
		
		//ID
		public RuleCall getEntity2IDTerminalRuleCall_4_0() { return cEntity2IDTerminalRuleCall_4_0; }
	}
	public class CardinalityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PMDSL.Cardinality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDigitOneKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDigitOneHyphenMinusAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDigitOneHyphenMinusDigitOneKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Cardinality:
		//    '1' | '*' | '1-*' | '1-1';
		@Override public ParserRule getRule() { return rule; }
		
		//'1' | '*' | '1-*' | '1-1'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'1'
		public Keyword getDigitOneKeyword_0() { return cDigitOneKeyword_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
		
		//'1-*'
		public Keyword getDigitOneHyphenMinusAsteriskKeyword_2() { return cDigitOneHyphenMinusAsteriskKeyword_2; }
		
		//'1-1'
		public Keyword getDigitOneHyphenMinusDigitOneKeyword_3() { return cDigitOneHyphenMinusDigitOneKeyword_3; }
	}
	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.PMDSL.Variant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cVariantKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cExtendsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReferenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cReferenceIDTerminalRuleCall_3_0 = (RuleCall)cReferenceAssignment_3.eContents().get(0);
		
		//Variant:
		//    'entity' 'Variant' 'extends' reference=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' 'Variant' 'extends' reference=ID
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//'Variant'
		public Keyword getVariantKeyword_1() { return cVariantKeyword_1; }
		
		//'extends'
		public Keyword getExtendsKeyword_2() { return cExtendsKeyword_2; }
		
		//reference=ID
		public Assignment getReferenceAssignment_3() { return cReferenceAssignment_3; }
		
		//ID
		public RuleCall getReferenceIDTerminalRuleCall_3_0() { return cReferenceIDTerminalRuleCall_3_0; }
	}
	
	
	private final ModelElements pModel;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final TypeElements pType;
	private final PrimitiveTypeElements pPrimitiveType;
	private final RelationElements pRelation;
	private final RelationElementElements pRelationElement;
	private final CardinalityElements pCardinality;
	private final VariantElements pVariant;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PMDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.pType = new TypeElements();
		this.pPrimitiveType = new PrimitiveTypeElements();
		this.pRelation = new RelationElements();
		this.pRelationElement = new RelationElementElements();
		this.pCardinality = new CardinalityElements();
		this.pVariant = new VariantElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.PMDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    entities+=Entity*
	//    relations+=Relation*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Entity:
	//    'entity' name=ID '{'
	//        attributes+=Attribute*
	//    '}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Attribute:
	//    'attribute' name=ID 'as' type=Type;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Type:
	//    entity=[Entity] | primitive=PrimitiveType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//PrimitiveType:
	//    'number' | 'string' | 'boolean' | 'date' | 'number[]' | 'string[]' | 'boolean[]' | 'date[]';
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return pPrimitiveType;
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}
	
	//Relation:
	//    'relations' '{'
	//        relationsList+=RelationElement*
	//    '}';
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//RelationElement:
	//    entity1=ID cardinality1=Cardinality '-' cardinality2=Cardinality entity2=ID;
	public RelationElementElements getRelationElementAccess() {
		return pRelationElement;
	}
	
	public ParserRule getRelationElementRule() {
		return getRelationElementAccess().getRule();
	}
	
	//Cardinality:
	//    '1' | '*' | '1-*' | '1-1';
	public CardinalityElements getCardinalityAccess() {
		return pCardinality;
	}
	
	public ParserRule getCardinalityRule() {
		return getCardinalityAccess().getRule();
	}
	
	//Variant:
	//    'entity' 'Variant' 'extends' reference=ID;
	public VariantElements getVariantAccess() {
		return pVariant;
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
